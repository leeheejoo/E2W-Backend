#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('e2w-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//web socket
const WebSocketServer = require('websocket').server;

wsClients = new Map();

wsServer = new WebSocketServer({
	httpServer: server,
	autoAcceptConnections: false
});

wsServer.on('request', function(request) {

	let connection = request.accept(undefined, request.origin);

	console.log((new Date()) + ' WebSocket Connection accepted.');

	connection.on('message',  function(message) {

		if(message.type === 'utf8') {

			let msgData = JSON.parse(message.utf8Data);
			if(msgData.type === 'myEmail') {
				wsClients.set(msgData.data.email, connection);
			}
		}

		console.log(message);

	});

	connection.send(JSON.stringify({
		type : 'getEmail',
		data : {}
	}));

	connection.on('close', function(reasonCode, description) {
		console.log((new Date()) + ' WebSocket Peer ' + connection.remoteAddress + ' disconnected.');
		for (let key of wsClients.keys()) {
			let client = wsClients.get(key);
			if(client === connection)
				wsClients.delete(key);
		};
	});

});